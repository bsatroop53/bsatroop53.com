---
layout: page
---

@using Pretzel.Logic.Templating.Context;

@{
    const int numberPosts = 20;
    var recentPosts = Model.Site.Posts.OrderByDescending(
        p => p.Date
    ).Take( numberPosts );

    var queue = new Queue<Page>( recentPosts.Count() );
    foreach( var recent in recentPosts )
    {
        queue.Enqueue( recent );
    }

    var upcomingEvents = new Queue<Page>();
    foreach( Page thePage in Model.Site.Pages )
    {
        if( thePage.Bag.ContainsKey( "layout" ) && "eventpage".Equals( thePage.Bag["layout"] ) )
        {
            upcomingEvents.Enqueue( thePage );
        }
    }
}

@Raw( Model.Content )
@{
    // Leave false until the centennial celebration
    // details are official.
}
@if( upcomingEvents.Any() && false )
{
    <h2>Upcoming Events</h2>
    <ul>
        @while( upcomingEvents.Any() )
        {
            var thePage = upcomingEvents.Dequeue();
            @:<li><strong><a href="@thePage.Url">@thePage.Title</a></strong> - @thePage.Bag["description"]</li>
        }
    </ul>
}

<h2>Recent Posts</h2>

<ul>
@while( queue.Any() )
{
    var post = queue.Dequeue();
    @:<li><strong><a href="@post.Url">@post.Title</a></strong> - @post.Bag["description"]</li>
}
</ul>

<h3><a href="/posts.html">View All Posts</a></h3>